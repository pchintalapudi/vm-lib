CLZ oops.core.precompiled.Array[short];
EXT oops.core.precompiled.Object;

IMP CLZ oops.core.precompiled.String;

IMP PROC oops.core.precompiled.String.new(oops.core.precompiled.Array[char])
IMP PROC oops.core.precompiled.String.join(oops.core.precompiled.Array[oops.core.precompiled.String])
IMP PROC oops.core.precompiled.String.size()
IMP IVAR oops.core.precompiled.String.data

IMP CLZ oops.core.precompiled.Constants;
IMP PROC oops.core.precompiled.Constants.getCommaSeparator()

IMP CLZ oops.core.precompiled.Integer;
IMP PROC oops.core.precompiled.Integer.toString(int);

PROC ref toString() ref this
    DEF ref string; the string to be built
    DEF ref builder; the character array to build into
    DEF int void; dumb return value
    DEF int builder_size; size (later size - 1) of new output array
    DEF int chr;
    DEF int idx; idx into builder array
    DEF ref cs
    SINV cs oops.core.precompiled.Constants.getCommaSeparator()
    DEF ref stringified_numbers
    ALEN builder_size this
    BEQI empty builder_size 0
    ANEW stringified_numbers ref builder_size
    LI idx 0
    LBL stringify
    SALD chr this idx
    SINV string oops.core.precompiled.Integer.toString(int) chr
    ASR stringified_numbers string idx
    ADDI idx idx 1
    BLT stringify idx builder_size
    SINV string oops.core.precompiled.String.join(oops.core.precompiled.Array[oops.core.precompiled.String]) cs stringified_numbers
    DEF int length
    DEF ref from
    VLLD from string oops.core.precompiled.String.data
    ALEN length from
    ADDI builder_size length 2
    ANEW builder char builder_size
    LI idx 0
    LBL copy
    CALD chr from idx
    ADDI idx idx 1
    CASR builder chr idx
    BLT copy idx length
    LBL done
    ADDI idx idx 1
    LI chr ']'
    CASR builder chr idx
    LI chr '['
    LI idx 0
    CASR builder chr idx
    VNEW string oops.core.precompiled.String;
    SINV void oops.core.precompiled.String.new(oops.core.precompiled.Array[char]) builder;
    RET string
    LBL empty
    LI idx 2
    ANEW builder char idx
    LI idx 0
    BU done
EPROC