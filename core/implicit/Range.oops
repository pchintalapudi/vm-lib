import core.implicit.Object;
import core.implicit.Numerics;

class Range : Object {
    private final int start;
    private final int end;
    private final int step;

    public def Range(int end) {
        this.start = 0;
        this.end = end;
        this.step = 1;
    }

    public def Range(int start, int end, int step = 1) {
        if (step == 0) {
            throw new ArgumentException("Step size must be nonzero!");
        }
        this.start = start;
        this.end = end;
        this.step = step;
    }

    public operator[](int index) -> int {
        int shift = step * index;
        if (end >= start && end - start <= shift || end < start && end - start >= shift) {
            throw new IndexException("Index out of bounds for Range object!");
        }
        return start + shift;
    }

    public def size() -> int {
        return (end - start) / step;
    }

    public def max() -> int {
        return Math.max(start, this[this.size() - 1]);
    }

    public def min() -> int {
        return Math.min(start, this[this.size() - 1]);
    }

    public def compose(Range other) -> Range {
        int step = this.step * other.step;
        int start = this[other[0]];
        int end = this[other[other.size() - 1]] + Numerics.signum(step);
        return new Range(start, end, step);
    }
}