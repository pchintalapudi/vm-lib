package core.implicit;
import core.implicit.Object;
import core.implicit.Array;
import core.implicit.Hashable;
import core.implicit.Range;
import core.collections.ArrayLike;
import core.collections.iterator.RandomAccessIterator;
import core.collections.ArrayIteratedView;
import core.collections.Collection;
import core.collections.Vector;

class String extends Object implements Hashable, ArrayLike<byte> {
    private var backing:byte[];
    private var hashcode:int;
    private var hashcode_valid:boolean;

    public constructor() {
        this.backing = new byte[0];
        this.hashcode = 0;
        this.hashcode_valid = true;
    }

    public constructor(src:Collection<byte>) {
        this.backing = new byte[src.size()];
        this.hashcode = 0;
        this.hashcode_valid = false;
        src.copyTo(this.backing);
    }

    public constructor(src1:Collection<byte>, src2:Collection<byte>) {
        this.backing = new byte[src1.size() + src2.size()];
        this.hashcode = 0;
        this.hashcode_valid = false;
        src1.copyTo(this.backing);
        src2.copyTo(new ArrayIteratedView<byte>(this.backing.begin() + src1.size(), this.backing.end()));
    }

    private def computeHash() -> int {
        return 0;
    }

    public def hash() -> int {
        if (!this.hashcode_valid) {
            this.hashcode = this.computeHash();
            this.hashcode_valid = true;
        }
        return this.hashcode;
    }

    public def getCharArray() -> byte[] {
        return backing.copy();
    }

    public operator get[](index:int) -> byte {
        return backing[index];
    }

    public operator get[](range:Range) -> String {
        return new String(this.backing, range);
    }

    public def size() -> int {
        return this.backing.size();
    }

    public def toString() -> String {
        return this;
    }

    public operator+(other:String) -> String {
        return new String(this.backing, other.backing);
    }

    public operator+<T>(t:T) -> String {
        return new String(this.backing, t.toString());
    }

    public def join<T>(collection:Collection<T>, prefix:String = "", suffix:String = "") -> String {
        var builder:Vector<byte> = new Vector<byte>();
        for (var t:T in collection) {
            String s = t.toString();
            for (var b:byte in s) {
                builder.pushBack(b);
            }
            for (var b:byte in this) {
                builder.pushBack(b);
            }
        }
        return new String(builder);
    }
};