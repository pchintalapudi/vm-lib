package core.implicit;
import core.implicit.Identifiable;

interface Comparable<E> implements Identifiable<E> {

    public def cmp(against:E) -> int;

    public operator<(against:E) -> boolean {
        return cmp(against) < 0;
    }

    public operator<=(against:E) -> boolean {
        return cmp(against) <= 0;
    }

    public operator==(against:E) -> boolean {
        return cmp(against) == 0;
    }

    public operator!=(against:E) -> boolean {
        return cmp(against) != 0;
    }

    public operator>(against:E) -> boolean {
        return cmp(against) > 0;
    }

    public operator>=(against:E) -> boolean {
        return cmp(against) > 0;
    }
}