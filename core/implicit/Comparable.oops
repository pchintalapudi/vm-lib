import core.implicit.Identifiable;

interface Comparable<E> implements Identifiable<E> {

    public def cmp(E against) -> int;

    public operator<(E against) -> boolean {
        return cmp(against) < 0;
    }

    public operator<=(E against) -> boolean {
        return cmp(against) <= 0;
    }

    public operator==(E against) -> boolean {
        return cmp(against) == 0;
    }

    public operator!=(E against) -> boolean {
        return cmp(against) != 0;
    }

    public operator>(E against) -> boolean {
        return cmp(against) > 0;
    }

    public operator>=(E against) -> boolean {
        return cmp(against) > 0;
    }
}