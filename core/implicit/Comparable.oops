import core.implicit.Identifiable;

interface Comparable<E> :: Identifiable<E> {

    public def cmp(Comparable<? sub E> against) -> int;

    public def operator<(Comparable<? sub E> against) -> boolean {
        return cmp(against) < 0;
    }

    public def operator<=(Comparable<? sub E> against) -> boolean {
        return cmp(against) <= 0;
    }

    public def operator==(Comparable<? sub E> against) -> boolean {
        return cmp(against) == 0;
    }

    public def operator!=(Comparable<? sub E> against) -> boolean {
        return cmp(against) != 0;
    }

    public def operator>(Comparable<? sub E> against) -> boolean {
        return cmp(against) > 0;
    }

    public def operator>=(Comparable<? sub E> against) -> boolean {
        return cmp(against) > 0;
    }
}