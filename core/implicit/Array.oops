package core.implicit;

import core.implicit.Object;
import core.implicit.String;
import core.implicit.Range;
import core.collections.ArrayLike;
import core.collections.iterators.RandomAccessIterator;

class Array<E> implements ArrayLike<E> {
    public intrinsic constructor(size:int);
    public intrinsic operator get[](index:int) -> E;
    public intrinsic operator set[](index:int, element:E) -> E;
    public intrinsic def size() -> int;
    public def toString() -> String;
    public def copied() -> Array<E> {
        var copied:E[] = new E[this.size];
        for (var i:int = 0; i < this.size(); i++) {
            copied[i] = this[i];
        }
        return copied;
    }
    public def equals(other:Array<E>) -> boolean {
        if (Object.referenceEquals(this, other)) {
            return true;
        }
        if (this.size() != other.size()) {
            return false;
        }
        for (var i:int = 0; i < this.size(); i++) {
            if (this[i] != other[i]) {
                return false;
            }
        }
        return true;
    }
}