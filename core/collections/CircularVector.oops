package core.collections;
import core.collections.List;
import core.collections.Deque;
import core.collections.Stack;
import core.implicit.Bits;

class CircularVector<E> implements List<E>, Deque<E> {
    private E[] backing;
    private int head;
    private int length;

    public def front() -> E {
        return this[0];
    }
    public def back() -> E {
        return this[this.length - 1];
    }

    public def reserve(int size) -> void {
        if (size <= this.backing.size()) {
            return;
        }
        size = Bits.ceilPowerOfTwo(size);
        E[] copy = new E[size];
        int straight = Math.min(backing.size() - head, length);
        this.backing.copyTo(copy, new Range(head, head + straight), new Range(straight));
        this.backing.copyTo(copy, new Range(0, length - straight), new Range(straight, length));
        this.backing = copy;
    }
    public def pushBack(E element) -> DynamicArray<E> {
        this.reserve(this.length + 1);
        this.length++;
        this[this.length - 1] = element;
        return this;
    }
    public def popBack() -> E {
        E element = this[this.length - 1];
        this[this.length - 1] = null;
        this.length--;
        return element;
    }
    public def pushFront(E element) -> DynamicArray<E> {
        this.reserve(this.length + 1);
        this.head = (this.head + this.backing.size() - 1) & (this.backing.size() - 1);
        this.length++;
        this[0] = element;
        return this;
    }
    public def popFront() -> E {
        E element = this[0];
        this[0] = null;
        this.head = (this.head + 1) & (this.backing.size() - 1);
        return element;
    }
    public def clear() -> DynamicArray<E> {
        for (int i = 0; i < this.length; i++) {
            this[i] = null;
        }
        this.length = 0;
        return this;
    }
    public def insert(int index, E element) -> DynamicArray<E> {
        if (index == this.length) {
            return this.pushBack(element);
        }
        E back = this.back();
        for (int i = this.length - 1; i --> index;) {
            this[i+1] = this[i];
        }
        this[index] = element;
        this.pushBack(back);
    }
    public def remove(int index) -> E {
        if (index == length - 1) {
            return this.popBack();
        }
        E element = this[index];
        for (int i = index; i < length - 1; i++) {
            this[i] = this[i+1];
        }
        this[length - 1] = null;
        this.length--;
        return element;
    }
    public def size() -> int {
        return this.length;
    }
}