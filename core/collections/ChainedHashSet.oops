package core.collections;
import core.collections.Set;
import core.collections.LinkedSequence;
import core.collections.iterators.Iterator;

class ChainedHashSet<E extends Hashable> implements Set<E> {
    private var hashtable:LinkedSequence<E>[];
    private var count:int;

    public def clear() -> Set<E> {
        for (var i:int = 0; i < hashtable.size(); i++) {
            hashtable[i] = null;
        }
        count = 0;
        return this;
    }
    public def add(element:E) -> Set<E> {
        int index = element.hash() & (hashtable.size() - 1);
        var chain:LinkedSequence<E> = hashtable[index];
        if (chain) {
            if (chain.contains(element)) {
                return this;
            }
        } else {
            hashtable[index] = chain = new LinkedSequence<E>();
        }
        chain.pushFront(element);
        return this;
    }
    public def remove(element:E) -> Set<E> {
        int index = element.hash() & (hashtable.size() - 1);
        var chain:LinkedSequence<E> = hashtable[index];
        if (chain) {
            chain.remove(element);
        }
        return this;
    }
    public def contains(element:E) -> Set<E> {
        var index:int = element.hash() & (hashtable.size() - 1);
        var chain:LinkedSequence<E> = hashtable[index];
        if (chain) {
            return chain.contains(element);
        }
        return false;
    }
    public def begin() -> Iterator<E>;
    public def end() -> Iterator<E>;
    public def size() -> int {
        return count;
    }
}