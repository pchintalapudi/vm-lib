package core.collections.iterators;
import core.collections.iterators.Iterator;
import core.collections.iterators.BidirectionalIterator;
import core.implicit.Comparable;

interface RandomAccessIterator<E> implements BidirectionalIterator<E>, Comparable<RandomAccessIterator<E>> {
    public operator+=(n:long) -> RandomAccessIterator<E>;
    public operator+(n:long) -> RandomAccessIterator<E>;
    public operator-(other:RandomAccessIterator<E>) -> long;
    public def cmp(other:RandomAccessIterator<E>) -> int;
    public operator-=(n:long) -> RandomAccessIterator<E> {
        return this += -n;
    }
    public operator-(n:long) -> RandomAccessIterator<E> {
        return this + -n;
    }

    public operator++() -> RandomAccessIterator<E> {
        return this += 1;
    }
    public operator++(_:long) -> RandomAccessIterator<E> {
        return this + 1;
    }
    public operator--() -> RandomAccessIterator<E> {
        return this -= 1;
    }
    public operator--(_:long) -> RandomAccessIterator<E> {
        return this - 1;
    }
    public operator==(other:Iterator<E>) -> boolean {
        return other instanceof RandomAccessIterator<E> && this == (other as RandomAccessIterator<E>);
    }
    public operator!=(other:Iterator<E>) -> boolean {
        return !(this == other);
    }
    public operator==(other:BidirectionalIterator<E>) -> boolean {
        return other instanceof RandomAccessIterator<E> && this == (other as RandomAccessIterator<E>);
    }
    public operator!=(other:BidirectionalIterator<E>) -> boolean {
        return !(this == other);
    }
    public operator[](n:long) -> E {
        this += n;
        E val = this.value;
        this -= n;
        return val;
    }
}