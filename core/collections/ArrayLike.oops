package core.collections;
import core.collections.Collection;
import core.collections.iterators.RandomAccessIterator;
import core.collections.iterators.ArrayLikeIterator;

interface ArrayLike<E> implements Collection<E> {
    public operator[](int index) -> E;
    public operator[](int index, E value) -> E;
    public def begin() -> RandomAccessIterator<E> {
        return new ArrayLikeIterator<E>(this, 0);
    }
    public def end() -> RandomAccessIterator<E> {
        return new ArrayLikeIterator<E>(this, this.size());
    }
    public def front() -> E {
        return this[0];
    }
    public def back() -> E {
        return this[this.size() - 1];
    }
    public def checkBounds(Range rng) -> boolean {
        return rng.min() >= 0 && rng.max() < this.size();
    }
    public def copyTo<D super E>(ArrayLike<D> destination) -> void {
        if (destination.size() < this.size()) {
            throw new IndexException("Destination array too small!");
        }
        for (int i = 0; i < this.size(); i++) {
            destination[i] = this[i];
        }
    }
}